ls - listeler
pwd - bulunulan yeri yazar 
cd " " - klasöre girer
cd .. - üst klasöre girer
clear - komutları temizler
mkdir - klasör oluşturur
touch not.txt - not.txt dosyası oluşturur
ls -la   -  Gizli klasörleri de gösterir.

rm not.txt - not.txt'yi siler
rm -rf KlasörAdı - klasörü siler

git config --global user.name "Ulaş Pirim"

git config --global user.email "ulpir53@gmail.com"


Commmit - Adımları kaydetmek olarak düşünebiliriz.

Branch - Dallanmadır. Aynı projede farklı dallarda 2 kişinin çalışması diyebiliriz.

git status - güncel git durumunu gösterir. Yani git ile bir bağlantı olup olmadığını gösterir.

git init - git'i başlatmış oluyor. 2 defa çalıştırılmamalı, status kontrol edilmeli.

repository - Tüm klasör bizim repomuzdur. 

git add - Dosyayı Git'e ekler.

touch deneme.txt - deneme text dosyası oluşturur.

Untracked files - Git içinde olmayan dosyalardır.

git commit -m "asd"  - Dosyada Git commit mesajı oluşturur.

git log - geçerli dosyaların sürüm geçmişini listelemek için kullanılır.

git commit -a   - Git add yerine kullanılabilir ve her şeyi add yapabilirsiniz dedi.

git add .   - 100'lerce dosyayı tek tek eklemek yerine bu komut tüm dosyaları ekliyor.

git log - Log bilgilerini gösterir.

Bir dosyanın locale yüklenmemesi için klasör içinde ".gitignore" klasörü açılmalıdır.
touch .gitignore  - Bu klasör içerisine girilecek dosya isimleri gizli kalacaktır.



Bir şey deneyecekken kendi ana dosyamızı bozmamak için veya başkasıyla çalışırken branch kullanırız.

git branch aaaa - branch oluşturur. Her branch içinde commit atılabilir.

git switch master - master'a geri dönüyor. 

git merge aaaa - aaaa ile master bitince, ikisini birleştiriyor yani master altında birleşiyor.

git branch - güncel branchleri gösterir.




Fast forwarding terimi - Master'da bir şey yapmayıp feat'te yapsaydık bu anlama gelirdi.

Eğer masterda ve branch'tekiler çakışırsa (dosya isimlerinin değişmesi vs) "Automatic merge failed" yazısı gelip bizi uyarıyor ve birleştirme yapamıyor.

Eğer master ve branch'te dosya içeriği vs silersek zaten bizi uyaracak ve emin misin gibisinden bize not gelecek


Eğer branch'te değişiklik yaparsak ve commit etmeden mastera geçersek branchte yaptığımız değişiklikler otomatik mastera geçmiş olacak (halbuki merge etmemiştik). Bu durumu çözmek için restore komutunu kullanırsak hem master hem de branchteki doya eski haline döner. Yani branchte yaptığımız değişiklikler de gitmiş oluyor. Bu durum için ya commit edilmeli ya da stash yapılmalıdır.

git restore dosyaadi - En sonki committe dosya nasılsa onu geri getirir.

stash - saklamak demektir. Commit etmeye hazır değilken branchte yapılan değişiklikler için işe yarıyor. Mülakatta bile karşımıza çıkabilirmiş.

git stash - üstte bahsettiğimiz durum için kullanılır. 

git stash pop - Sakladığı verileri dışarı atar. Yani geri getirir. 

git stash list - Güncel olarak sakladığımız verileri gösterir.

git stash apply - Seçilen stash uygulanır. Mesela 3 tane stash oluşturduğumuzda listeden stash adına bakarak o stashi geri getirebiliriz.

git stash clear - tüm saklananları siler


git checkout <commitID> - Head (master değil), id'si yazılan kısma gider. Branch ise en son commitlendiği yerde kalır. Head'in bulunduğu commit id'de yeni bir branch açabiliriz.

git reset <commitID> - commitID yazılan yere girilen commitin ID'sinin olduğu yerde dosyaları değiştirmeden commitler siler.

git reset --hard <commitID> - commitID yazılan yere gider ve önceden hangi durumdaysa o duruma geçer. Committen sonraki dosya içerikleri silinir.

git revert <commitID> - commitID yazılan yere gider ve görünürde committen sonraki içerikler silinmiş gibidir fakat commitler silinmez. Eski commite gider fakat yeni commit oluşturur. Risk almaya gerek kalmamış olur.

git diff - belirli alanlar (commitler, branchler) arasındaki farkları gösterir. Aynı dosyanın önceki ve sonraki versiyonları arasındakini kapsar.

git diff <commitID A> <commitID B> - commitA ve commitB commitleri arasındaki farkları gösterir.

git diff <branch A> <branch B> - A ve B branchleri arasındaki farkları gösterir.


git rebase - merge yaparken master ve ikinci branch arasında merge commit yapmak yerine hizalama ve sıraya sokma maksatıyla rebase kullanılır (git rebase master). Ve ilk başta masterlar sonra branchler koyulur.
Asla kullanmamız gereken durum ise,	başka kişilere paylaşım yaptığımız commitlerin olmamasıdır. Başkalarının değil sadece bizim çalıştığımız commitlerde sağlıklı çalışır.


GitHub kısmı

get remote add origin - uzak dosyamızın hangi link olacağını belirliyoruz.

get push -u origin main - her seferinde url vermek yerine adını origin yaptığımız için oraya push edebiliyoruz.

git switch feat -

git remote - 


Compare & Pull request - GitHub üzerinde branchleri birleştirmemizi sağlar. Eğer hata yoksa birleştirmede sorun yok anlamına gelir.

git branc -r  - remote'taki branchleri görüntüler

git fetch origin master  - origin'deki masteri getirir.

get checkout origin/master  - origindeki mastera switch etmek için checkout kullanılır

git pull origin master - GitHub'taki masterda yapılan değişiklikleri alır ve ana masterimiz ile merge eder.

git clone <GitHub Clone Linki> - Verilen adresteki repoyu bilgisayara klonlamaya yarar

Başkasının hesabından clone ile repo indirirsek ve düzenleme yaptığımızda pushlama işlemi hata verir. Bu yüzden fork kullanılıp clone yapılır. 

Fork çatallama anlamına geliyor. Eğer başkasının reposunda fork dersek bu reponun aynısını kendi hesabımıza kopyalar.